@{
	var employees = ViewBag.Employees as IEnumerable<PTracking.Models.Employee>;
}

<div class="Dashboard row">
	<div class="col-sm-4 mb-3">
		<div class="card bg-danger text-white rounded">
			<div class="card-body">
				<h6 class="card-title">
					<a href="@Url.Action("", "Projects")" class="text-white"> Incomplete Projects</a>
				</h6>
				<p class="card-text">@ViewBag.IncompleteCount</p>
			</div>
		</div>
	</div>

	<div class="col-sm-4 mb-3">
		<div class="card bg-warning text-dark rounded">
			<div class="card-body">
				<h6 class="card-title">
					<a href="@Url.Action("", "Projects")" class="text-white"> In Progress Projects </a>
				</h6>
				<p class="card-text">@ViewBag.InProgressCount</p>
			</div>
		</div>
	</div>

	<div class="col-sm-4 mb-3">
		<div class="card bg-success text-white rounded">
			<div class="card-body">
				<h6 class="card-title">
					<a href="@Url.Action("", "Projects")" class="text-white"> Complete Projects</a>
				</h6>
				<p class="card-text">@ViewBag.CompleteCount</p>
			</div>
		</div>
	</div>
</div>

<div class="Dashboard row">
	<div class="col-md-4 mb-3">
		<div class="card bg-danger text-white rounded">
			<div class="card-body">
				<h6 class="card-title">
					<a href="@Url.Action("DisplayActiveTickets", "Tickets")" class="text-white">Active Tickets</a>
				</h6>
				<p class="card-text">@ViewBag.ActiveTicketCount</p>
			</div>
		</div>
	</div>
	<div class="col-sm-4 mb-3">
		<div class="card bg-warning text-dark rounded">
			<div class="card-body">
				<h6 class="card-title">
					<a href="@Url.Action("", "Tickets")" class="text-white"> Total of High Priority Tickets</a>
				</h6>
				<p class="card-text">@ViewBag.PriorityTickets</p>
			</div>
		</div>
	</div>

	<div class="col-sm-4 mb-3">
		<div class="card bg-success text-white rounded">
			<div class="card-body">
				<h6 class="card-title">
					<a href="@Url.Action("", "Tickets")" class="text-white">Tickets Per Sprint</a>
				</h6>
				<p class="card-text">@ViewBag.PerSprint</p>
			</div>
		</div>
	</div>

	<div class="card bg-danger text-white rounded col-sm-4 mb-3">
		<div class="card-body">
			<h6 class="card-title">
				<a href="@Url.Action("", "Employees")" class="text-white">Employees</a>
			</h6>
			<p class="card-text">@ViewBag.TotalNumEmployees</p>
		</div>
	</div>
</div>

		<div class="card bg-danger text-white rounded col-sm-4 mb-3">
			<div class="card-body">
				<h6 class="card-title">
			<a href="@Url.Action("", "Tickets")" class="text-white">Active Clients</a>
		</h6>
				<p class="card-text">@ViewBag.UniqueCompanyCount</p>
			</div>
</div>


</div>


<div class="chart-container">
	<canvas id="activeProjects" style="max-width:390px; max-height:430px;"></canvas>
	<canvas id="lineChart" style="max-width:390px; max-height:430px;"></canvas>
	<canvas id="userAssigned" style="max-width:390px; max-height:430px;"></canvas>		
	<canvas id="ticketNamesChart" style="max-width:390px; max-height:430px;"></canvas>
	<canvas id="pieChart" style="max-width:390px; max-height:430px;"></canvas>

</div>						

<!-- Your HTML content -->
<div id="employeeData">
	<table class="table">
		<thead>
			<tr>
				<th></th>
				<th>Name</th>
				<th>Email</th>
				<th> Status </th>
				<!-- Add other column headers here -->
				
			</tr>
		</thead>
		<tbody>
			@if (ViewBag.Employees != null)
			{
				foreach (var employee in ViewBag.Employees)
				{
					<tr>
						<td> <img src="@employee.icon" alt="User Image" /></td>
						<td>@employee.Name</td>
						<td>@employee.Email</td>
						<td>
							@if (employee.Availability == "Available")
							{
								<button type="button" class="btn btn-success custom-btn">Available</button>
							}
							else
							{
								<button type="button" class="btn btn-danger custom-btn">Unavailable</button>
							}
						</td>
					
						@*	<td>
				<a asp-action="Edit" asp-route-id="@employee.ID">Edit</a> |
				<a asp-action="Details" asp-route-id="@employee.ID">Details</a> |
				<a asp-action="Delete" asp-route-id="@employee.ID">Delete</a>
				</td>*@
						<!-- Add other columns using employee properties -->
					</tr>
				}
			}
			else
			{
				<tr>
					<td colspan="2">No employee data available</td>
				</tr>
			}
		</tbody>
	</table>
</div>


@section Scripts {
	<!-- Include necessary libraries -->
	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

	<script>
		// ... previous chart scripts ...

		// Code for activeProjectsChart
		var activeLabels = @Html.Raw(Json.Serialize(ViewBag.ProjectChartLabels));
		var activechartData = @Html.Raw(Json.Serialize(ViewBag.ProjectChartData));

		var statusColors = [
			'rgba(75, 192, 192, 0.7)', // Color for completed
			'rgba(255, 99, 132, 0.7)', // Color for incomplete
			'rgba(255, 206, 86, 0.7)' // Color for in progress
			// Add more colors for additional statuses if needed
		];

		var activeProjectsChart = new Chart(document.getElementById('activeProjects'), {
			type: 'pie',
			data: {
				labels: activeLabels,
				datasets: [{
					data: activechartData,
					backgroundColor: statusColors
				}]
			},
			options: {
				plugins: {
					title: {
						display: true,
						text: 'Sprint Project Progress Overview', // Assign the title here
						fontSize: 18 // Adjust the font size as needed
					}
					// Add chart options here if needed
				}
			}

		});
	</script>

	<script>
		// NUM of projects assigned
		var uniqueMembers = @Html.Raw(Json.Serialize(ViewBag.UniqueMembers));
		var memberOccurrences = @Html.Raw(Json.Serialize(ViewBag.MemberOccurrences));

		var memberColors = [
			'rgba(255, 99, 132, 0.7)',
			'rgba(54, 162, 235, 0.7)',
			'rgba(255, 206, 86, 0.7)'
			// Add more colors for additional members
		];

		var ctxUserAssigned = document.getElementById('userAssigned').getContext('2d');
		var memberChart = new Chart(ctxUserAssigned, {
			type: 'bar',
			data: {
				labels: uniqueMembers,
				datasets: [{
					label: '# Projects Per Sprint',
					data: memberOccurrences,
					backgroundColor: memberColors.slice(0, uniqueMembers.length),
					borderColor: 'rgba(54, 162, 235, 1)',
					borderWidth: 1
				}]
			},
			options: {
				plugins: {
					title: {
						display: true,
						text: 'Number of Projects Assigned', // Assign the title here
						fontSize: 18 // Adjust the font size as needed
					}
					// Add chart options here if needed
				}
			}
		});

	</script>




	<script>
		var uniqueMonths = @Html.Raw(Json.Serialize(ViewBag.UniqueMonths));
		var numOfProjects = @Html.Raw(Json.Serialize(ViewBag.NumOfProjects));

		var ctxLineChart = document.getElementById('lineChart').getContext('2d');

		var lineChart = new Chart(ctxLineChart, {
			type: 'line',
			data: {
				labels: uniqueMonths,
				datasets: [{
					label: 'Number of Projects',
					data: numOfProjects,
					backgroundColor: 'rgba(255, 99, 132, 0.2)',
					borderColor: 'rgba(255, 99, 132, 1)',
					borderWidth: 1
				}]
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				},
				plugins: { // Moved 'plugins' outside 'scales'
					title: {
						display: true,
						text: 'Projects by Year', // Assign the title here
						fontSize: 18 // Adjust the font size as needed
					}
					// Add chart options here if needed
				}
			}
		});
	</script>



	<script>
		// Get data from ViewBag
		var chartLabels = @Html.Raw(Json.Serialize(ViewBag.ChartLabels));
		var chartData = @Html.Raw(Json.Serialize(ViewBag.ChartData));

		var statusColors = [
			'rgba(75, 192, 192, 0.7)', // Color for completed
			'rgba(255, 99, 132, 0.7)', // Color for incomplete
			'rgba(255, 206, 86, 0.7)' // Color for in progress
			// Add more colors for additional statuses if needed
		];

		var pieChart = new Chart(document.getElementById('pieChart'), {
			type: 'pie',
			data: {
				labels: chartLabels,
				datasets: [{
					data: chartData,
					backgroundColor: statusColors
				}]
			},
			options: {
				plugins: {
					title: {
						display: true,
						text: 'Sprint Ticket Progress Overview', // Assign the title here
						fontSize: 18 // Adjust the font size as needed
					}
					// Add chart options here if needed
				}
			}
		});
	</script>








	@*	<script>

User Task Assignment Summary

		var _chartLabels = @Html.Raw(Json.Serialize(ViewBag.ChartLabels));
		var _chartData = @Html.Raw(Json.Serialize(ViewBag.ChartData));

		var ticketNames = _chartLabels.map(function (label) {
			return 'Ticket ' + label;
		});

		var barColor = ["green", "blue", "orange", "brown"]; // Define your colors as needed

		var ctxMyChart = document.getElementById('ticketComplete').getContext('2d');
		var myChart = new Chart(ctxMyChart, {
			type: "bar",
			data: {
				labels: ticketNames,
				datasets: [{
					backgroundColor: barColor.slice(0, _chartData.length), // Use colors based on data length
					data: _chartData
				}]
			},
			options: {
				title: {
					display: true,
					text: 'Sprint Ticket Progress Overview', // Assign the title here
					fontSize: 18 // Adjust the font size as needed
				}
			}
		});
	</script>*@




	@*	<script>

		// This part is for the myChart based on ViewBag data
		var _chartLabels = @Html.Raw(Json.Serialize(ViewBag.ChartLabels));
		var _chartData = @Html.Raw(Json.Serialize(ViewBag.ChartData));

		var ticketNames = _chartLabels.map(function (label) {
			return 'Ticket ' + label;
		});

		var barColor = ["red", "green", "blue", "orange", "brown"]; // Define your colors as needed

		var ctxMyChart = document.getElementById('myChart').getContext('2d');
		var myChart = new Chart(ctxMyChart, {
			type: "bar",
			data: {
				labels: ticketNames,
				datasets: [{
					backgroundColor: barColor.slice(0, _chartData.length), // Use colors based on data length
					data: _chartData
				}]
			}
		});

	</script>*@




















	<script>
		// Get data from ViewBag
		var categoryLabels = @Html.Raw(Json.Serialize(ViewBag.CategoryList));
		var categoryData = @Html.Raw(Json.Serialize(ViewBag.CategoryCt));

		var statusColors = [
			'rgba(75, 192, 192, 0.7)', // Color for completed
			'rgba(255, 99, 132, 0.7)', // Color for incomplete
			'rgba(255, 206, 86, 0.7)' // Color for in progress
			// Add more colors for additional statuses if needed
		];

		var activeCategoryChart = new Chart(document.getElementById('categoryProjects'), {
			type: 'pie',
			data: {
				labels: categoryLabels,
				datasets: [{
					data: categoryData,
					backgroundColor: statusColors
				}]
			},
			options: {
				plugins: {
					title: {
						display: true,
						text: 'Current Project Categories Overview', // Assign the title here
						fontSize: 18 // Adjust the font size as needed
					}
					// Add chart options here if needed
				}
			}
		});
	</script>





	<script>
		// This part is for the myChart based on AJAX calling the C# function
		fetchDataAndRenderChart();

		function fetchDataAndRenderChart() {
			$.ajax({
				type: "POST",
				url: "/Home/GetUserAssigned", // Replace YourController with your actual controller name
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (data) {
					// Process the returned data here and render your chart
					var _chartLabels = data.chartLabels;
					var _chartData = data.chartData;

					var barColor = ["red", "green", "blue", "orange", "brown"]; // Define your colors as needed

					var ctxMyChart = document.getElementById('ticketNamesChart').getContext('2d');
					var myChart = new Chart(ctxMyChart, {
						type: "bar",
						data: {
							labels: _chartLabels, // Use ticket names retrieved from the server as labels
							datasets: [{
								backgroundColor: barColor.slice(0, _chartData.length), // Use colors based on data length
								data: _chartData
							}]
						},
						options: {
							plugins: {
								title: {
									display: true,
									text: 'Points Assigned per Ticket', // Assign the title here
									fontSize: 18 // Adjust the font size as needed
								}
								// Add chart options here if needed
							}
						}
					});
				},
				error: function (err) {
					// Handle errors here
					console.error(err);
				}
			});
		}

	</script>


    }















