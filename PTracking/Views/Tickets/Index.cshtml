@model IEnumerable<PTracking.Models.Tickets>

@{
	ViewData["Title"] = "Active Tickets";
}

<html>
<head>
	<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css">
	<link rel="stylesheet" href="https://cdn.datatables.net/1.13.7/css/jquery.dataTables.css" />
	
</head>
<body>

	<div class="container-fluid">
		<div class="row">
			<!-- Cards section -->
			<div class="col-md-4 mb-3">
				<div class="card bg-danger text-white rounded">
					<div class="card-body">
						<h6 class="card-title">
							<a href="@Url.Action("DisplayActiveTickets", "Tickets")" class="text-white">Active Tickets</a>
						</h6>
						<p class="card-text">@ViewBag.ActiveTicketCount</p>
					</div>
				</div>
			</div>
			<div class="col-md-4 mb-3">
				<div class="card bg-warning text-dark rounded">
					<div class="card-body">
						<h6 class="card-title">
							<a href="@Url.Action("DisplayPriority", "Tickets")" class="text-white">Total of High Priority Tickets </a>
						</h6>
						<p class="card-text">@ViewBag.PriorityTickets</p>
					</div>
				</div>
			</div>
			<div class="col-md-4 mb-3">
				<div class="card bg-success text-white rounded">
					<div class="card-body">
						<h6 class="card-title">
							<a href="@Url.Action("DisplayTicketsBySprint", "Tickets")" class="text-white"> Tickets Per Sprint </a>
						</h6>
						<p class="card-text">@ViewBag.PerSprint</p>
					</div>
				</div>
			</div>
			<!-- Charts and data section -->
			<div class="col-md-6">
				<div class="row">
					<div class="chart col-md-12">
						<canvas id="ticketComplete" class="chart-canvas"></canvas>
					</div>
					<div class="chart col-md-12">
						<canvas id="pieChart" class="chart-canvas"></canvas>
					</div>
				</div>
			</div>
			<div class="col-md-6">
				<div id="employeeData">
					<table class="table table1">
						<thead>
							<tr>
								<th></th>
								<th>Name</th>
								<th>Email</th>
								<th>Status</th>
							</tr>
						</thead>
						<tbody>
							@if (ViewBag.Employees != null)
							{
								foreach (var employee in ViewBag.Employees)
								{
									<tr>
										<td><img src="@employee.icon" alt="User Image" /></td>
										<td>@employee.Name</td>
										<td>@employee.Email</td>
										<td>
											@if (employee.Availability == "Available")
											{
												<button type="button" class="btn btn-success custom-btn">Available</button>
											}
											else
											{
												<button type="button" class="btn btn-danger custom-btn">Unavailable</button>
											}
										</td>
									</tr>
								}
							}
							else
							{
								<tr>
									<td colspan="4">No employee data available</td>
								</tr>
							}
						</tbody>
					</table>
				</div>
				<div>
					<canvas id="userAssigned" class="chart-canvas"></canvas>
					<canvas id="ticketNamesChart" class="chart-canvas"></canvas>
				</div>
			</div>


	@{

		var ticketList = ViewBag.Tickets as IEnumerable<Tickets>;
	}

	<div class="table-responsive" style="overflow-x: auto;">
		<table id="ticketsTable" class="table table-responsive table-bordered">	
			<thead>

				<tr>
					<th>
						Name
					</th>
					<th>
						Description
					</th>
					<th>
						ProjectName
					</th>
					<th>
						Company
					</th>
					<th>
						User Assigned
					</th>
					<th>
						Assigned By
					</th>
					<th>
						Status
					</th>
					<th>
						Priority
					</th>
					<th>
						Category
					</th>
					<th>
						DueBy
					</th>
					<th>
						Start Date
					</th>
				</tr>
			</thead>>
			<tbody>
				@if (ViewBag.Tickets != null)
				{
					@foreach (var item in ViewBag.Tickets)
					{

						<tr>
							<td>@item.Name</td>
							<td>@item.Description</td>
							<td>@item.ProjectName</td>
							<td>@item.Company</td>
							<td>@item.UserAssigned</td>
							<td>@item.AssignedBy</td>
							<td>@item.Status</td>
							<td>@item.Priority</td>
							<td>@item.Category</td>
							<td>@item.DueBy</td>
							<td>@item.StartDate</td>


						</tr>
					}
				}
				else
				{
					<tr>
						<td colspan="14">No tickets available</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
	<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
	<script src="https://cdn.datatables.net/1.13.7/js/jquery.dataTables.js"></script>







@section Scripts {
	<script> 
		$(document).ready( function () {
				$.noConflict();
			$('#ticketsTable').DataTable();
		} );
		</script>
	

	<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

	<script>
		var chartLabels = @Html.Raw(Json.Serialize(ViewBag.ChartLabels));
		var chartData = @Html.Raw(Json.Serialize(ViewBag.ChartData));

		var statusColors = [
			'rgba(75, 192, 192, 0.7)', // Color for completed
			'rgba(255, 99, 132, 0.7)', // Color for incomplete
			'rgba(255, 206, 86, 0.7)' // Color for in progress
			
		];

		var pieChart = new Chart(document.getElementById('pieChart'), {
			type: 'pie',
			data: {
				labels: chartLabels,
				datasets: [{
					data: chartData,
					backgroundColor: statusColors
				}]
			},
			options: {
				
			}
		});
	</script>

	<script>
		
		var uniqueMembers = @Html.Raw(Json.Serialize(ViewBag.UniqueMembers));
		var memberOccurrences = @Html.Raw(Json.Serialize(ViewBag.MemberOccurrences));

		var memberColors = [
			'rgba(255, 99, 132, 0.7)',
			'rgba(54, 162, 235, 0.7)',
			'rgba(255, 206, 86, 0.7)'
			
		];

		var ctxUserAssigned = document.getElementById('userAssigned').getContext('2d');
		var memberChart = new Chart(ctxUserAssigned, {
			type: 'bar',
			data: {
				labels: uniqueMembers,
				datasets: [{
					label: 'Number of Tickets Assigned',
					data: memberOccurrences,
					backgroundColor: memberColors.slice(0, uniqueMembers.length),
					borderColor: 'rgba(54, 162, 235, 1)',
					borderWidth: 1
				}]
			},
			options: {
				
			}
		});

	</script>

	<script>

		
		var _chartLabels = @Html.Raw(Json.Serialize(ViewBag.ChartLabels));
		var _chartData = @Html.Raw(Json.Serialize(ViewBag.ChartData));

		var ticketNames = _chartLabels.map(function (label) {
			return 'Ticket ' + label;
		});

		var barColor = ["red", "green", "blue", "orange", "brown"]; 

		var ctxMyChart = document.getElementById('ticketComplete').getContext('2d');
		var myChart = new Chart(ctxMyChart, {
			type: "bar",
			data: {
				labels: ticketNames,
				datasets: [{
					backgroundColor: barColor.slice(0, _chartData.length), 
					data: _chartData
				}]
			}
		});

	</script>


@*	<script>

		// This part is for the myChart based on ViewBag data
		var _chartLabels = @Html.Raw(Json.Serialize(ViewBag.ChartLabels));
		var _chartData = @Html.Raw(Json.Serialize(ViewBag.ChartData));

		var ticketNames = _chartLabels.map(function (label) {
			return 'Ticket ' + label;
		});

		var barColor = ["red", "green", "blue", "orange", "brown"]; // Define your colors as needed

		var ctxMyChart = document.getElementById('myChart').getContext('2d');
		var myChart = new Chart(ctxMyChart, {
			type: "bar",
			data: {
				labels: ticketNames,
				datasets: [{
					backgroundColor: barColor.slice(0, _chartData.length), // Use colors based on data length
					data: _chartData
				}]
			}
		});

	</script>*@



	<script>
		// This part is for the myChart based on AJAX calling the C# function
		fetchDataAndRenderChart();

		function fetchDataAndRenderChart() {
			$.ajax({
				type: "POST",
				url: "/Tickets/GetUserAssigned", // Replace YourController with your actual controller name
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				success: function (data) {
					// Process the returned data here and render your chart
					var _chartLabels = data.chartLabels;
					var _chartData = data.chartData;

					var barColor = ["red", "green", "blue", "orange", "brown"]; // Define your colors as needed

					var ctxMyChart = document.getElementById('ticketNamesChart').getContext('2d');
					var myChart = new Chart(ctxMyChart, {
						type: "bar",
						data: {
							labels: _chartLabels, // Use ticket names retrieved from the server as labels
							datasets: [{
								backgroundColor: barColor.slice(0, _chartData.length), // Use colors based on data length
								data: _chartData
							}]
						}
					});
				},
				error: function (err) {
					// Handle errors here
					console.error(err);
				}
			});
		}

	</script>
	}
	</body>
	</html>